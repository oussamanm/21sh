**Termcap
    - Edit the line where the cursor is located.
    - Move the cursor left and right to be able to edit the line at a specific location. Obviously new characters have to be inserted between the existing ones similarly to a classic shell.
    - Line edition feature
        . Read from cmd line {printabel / non printabel}
        . fill list_dim
    - The ctrl+D et ctrl+C
    - Use up and down arrows to navigate through the command history which we will then be able to edit if we feel like it (the line, not the history)
    - Move directly by word towards the left or the right using ctrl+LEFT and ctrl+RIGHT
        or any other reasonable combination of keys.
    - Go directly to the beginning or the end of a line by pressing home and end.
    - Write AND edit a command over a few lines. In that case, we would love that ctrl+UP and ctrl+DOWN allow to go from one line to another in the command
        while remaining in the same column or otherwise the most appropriate column.

**Pipe and Redirection
    - Completely manage quotes and double quotes, even on several lines (expansions
    excluded).
    - The “;” command line separator
    - Pipes “|”
    - The 4 following redirections “<”, “>”, “<<” et “>>”
    - File descriptor aggregation, for example to close the standard error output:



///////////********* TASKS ********///////////////


- ;
- ‘<<-’, then all leading tab characters are stripped from input lines and the line containing delimiter.
- Change variable in here_doc


******* To check

- variable inside value of variable (incres i)
cat <<eof1; cat <<eof2





************* test
-------------------------------------

[n] > file
Redirect standard output (or n) to file.

>file
>    asdasd
>0
>     .0 --?---
>"file"
> 'file'
>          "file2"
>   ./
> ~
                        "2">err  ("2" is not an argument) OK
2    > err
                        2>"" OK
------------------------------------

[n1] >& n2 :
Duplicate standard output (or n1) to n2.

>&file
&>file
&>      file
& >   file   => job controle
&&>file      => logical operator 
&>1file         
>&2file
1>"&2"
1>&1
2>& 0
file>&file
                        file&>file : do append in the second time :::: add flag o-trun OK
"file"&>file
                        1> &file : syntax error near unexpected token `&' , no space between '>' '&'
                        pwd >"$qweqwe qwe" OK (error was in ft_swap_vrb in cond who collect vrb) OK
-------------------------------------

<

------------- 
>>
-------------
<<